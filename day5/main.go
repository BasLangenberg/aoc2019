package main

import (
	"fmt"
	"strconv"
	"strings"
)

const input = "3,225,1,225,6,6,1100,1,238,225,104,0,1101,86,8,225,1101,82,69,225,101,36,65,224,1001,224,-106,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,102,52,148,224,101,-1144,224,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,1102,70,45,225,1002,143,48,224,1001,224,-1344,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1101,69,75,225,1001,18,85,224,1001,224,-154,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,15,59,225,1102,67,42,224,101,-2814,224,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,1101,28,63,225,1101,45,22,225,1101,90,16,225,2,152,92,224,1001,224,-1200,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1101,45,28,224,1001,224,-73,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1,14,118,224,101,-67,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,677,677,224,102,2,223,223,1005,224,329,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,344,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,359,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,374,101,1,223,223,1108,677,226,224,102,2,223,223,1005,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1005,224,404,101,1,223,223,1008,677,226,224,102,2,223,223,1005,224,419,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,434,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,1108,226,226,224,1002,223,2,223,1005,224,479,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1007,226,226,224,102,2,223,223,1005,224,509,101,1,223,223,107,677,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,539,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,554,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,569,101,1,223,223,108,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,108,226,226,224,102,2,223,223,1006,224,599,1001,223,1,223,1107,226,226,224,102,2,223,223,1006,224,614,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,629,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,644,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,659,101,1,223,223,7,226,677,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226"

// const input = "3,0,4,0,99"

func getInput(input string) []int {
	var data []int
	for _, num := range strings.Split(input, ",") {
		conv, err := strconv.Atoi(num)
		if err != nil {
			fmt.Printf("Failed to convert num: %s", num)
		}
		data = append(data, conv)
	}

	return data
}

// Write a test!
func main() {
	inp := getInput(input)
	compute(inp)
}

func compute(input []int) int {
	stepper := 0
	for {
		// fmt.Println(stepper)
		if stepper >= len(input)-1 {
			break
		}

		intCode := string(input[stepper])

		var a int
		var b int
		var c int
		var d int

		switch len(intCode) {
		case 3:
			a = 0
			b = 0
			c, _ = strconv.Atoi(string(intCode[0]))
			d, _ = strconv.Atoi(string(intCode[1:]))
		case 4:
			a = 0
			b, _ = strconv.Atoi(string(intCode[0]))
			c, _ = strconv.Atoi(string(intCode[1]))
			d, _ = strconv.Atoi(string(intCode[2:]))
		case 5:
			a, _ = strconv.Atoi(string(intCode[0]))
			b, _ = strconv.Atoi(string(intCode[1]))
			c, _ = strconv.Atoi(string(intCode[2]))
			d, _ = strconv.Atoi(string(intCode[3:]))
		case 1, 2:
			d = input[stepper]
		default:
			panic("Stuff is not ok. CHeck input")
		}

		switch d {
		case 1:
			var s1 int
			var s2 int

			if a == 0 {
				s1 = input[input[stepper+1]]
			} else if a == 1 {
				s1 = input[stepper+1]
			}
			if b == 0 {
				s2 = input[input[stepper+2]]
			} else if b == 1 {
				s2 = input[stepper+2]
			}
			if c == 0 {
				input[input[stepper+3]] = s1 + s2
			} else if a == 1 {
				input[stepper+3] = s1 + s2
			}

			stepper += 4
		case 2:
			var s1 int
			var s2 int

			if a == 0 {
				s1 = input[input[stepper+1]]
			} else if a == 1 {
				s1 = input[stepper+1]
			}
			if b == 0 {
				s2 = input[input[stepper+2]]
			} else if b == 1 {
				s2 = input[stepper+2]
			}
			if c == 0 {
				input[input[stepper+3]] = s1 * s2
			} else if a == 1 {
				input[stepper+3] = s1 * s2
			}
			stepper += 4
		case 3:
			s1 := input[stepper+1]
			var intput int
			fmt.Print("Enter input: ")
			_, err := fmt.Scanf("%d", &intput)
			if err != nil {
				fmt.Println(err)
			}
			input[s1] = intput
			stepper += 2
		case 4:
			s1 := input[stepper+1]
			fmt.Printf("Output: %v", input[s1])
			stepper += 2
		case 99:
			break
		default:
			// fmt.Printf("No op code? %d\n", d)
			stepper++
		}

	}
	return 12
}
